---
# Homebrew setup prerequisites.
- name: Ensure Homebrew parent directory has correct permissions.
  file:
    path: "{{ homebrew_prefix }}"
    owner: "{{ ansible_user_id }}"
    group: admin
    state: directory
    mode: 0775
    recurse: yes
  become: yes

- stat:
    path: "{{ homebrew_install_path }}"
  register: st

- name: Remove HB packages if they exist
  shell: brew remove --force --ignore-dependencies $(brew list)
  when: st.stat.exists == true

- name: Ensure Homebrew directory exists.
  file:
    path: "{{ homebrew_install_path }}"
    owner: "{{ ansible_user_id }}"
    group: admin
    state: directory
    mode: 0775
  become: yes

# Clone Homebrew.
- name: Ensure Homebrew is installed.
  git:
    repo: "{{ homebrew_repo }}"
    version: master
    dest: "{{ homebrew_install_path }}"
    update: no
    accept_hostkey: yes
    depth: 1

# Adjust Homebrew permissions.
- name: Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.
  file:
    path: "{{ homebrew_brew_bin_path }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: admin
    mode: 0775
    recurse: yes
  become: yes

- name: Ensure proper ownership on homebrew_install_path subdirs.
  file:
    path: "{{ homebrew_install_path }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: admin
    mode: u+rwx
    recurse: yes
  become: yes

# Place brew binary in proper location and complete setup.
- name: Check if homebrew binary is already in place.
  stat: "path={{ homebrew_brew_bin_path }}/brew"
  register: homebrew_binary

- name: Symlink brew to homebrew_brew_bin_path.
  file:
    src: "{{ homebrew_install_path }}/bin/brew"
    dest: "{{ homebrew_brew_bin_path }}/brew"
    state: link
  when: homebrew_binary.stat.exists == false
  become: yes

- name: Force update brew after installation.
  command: "{{ homebrew_brew_bin_path }}/brew update --force"
  when: homebrew_binary.stat.exists == false

# Tap.
- name: Ensure configured taps are tapped.
  homebrew_tap: "tap={{ item }} state=present"
  with_items: "{{ homebrew_taps }}"

- name: Remove pre-installed PHP version.
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ php_remove_directories }}"
  become: yes

# Brew.
- name: Ensure configured homebrew packages are installed.
  homebrew:
    name: "{{ item.name | default(item) }}"
    state: latest
  with_items: "{{ homebrew_installed_packages }}"
  notify:
    - Source bash_profile

- name: Upgrade all homebrew packages.
  homebrew: update_homebrew=yes upgrade_all=yes

- name: Link correct elasticsearch version for Inside.
  shell: "{{ item }}"
  with_items:
    - brew unlink elasticsearch
    - brew link elasticsearch@2.4 --force
    - rbenv rehash
  notify:
    - Source bash_profile

- name: Get list of installed casks.
  command: brew cask list
  register: installed_casks

# Install casks.
- name: Install configured cask applications.
  homebrew_cask:
    name: "{{ item }}"
    state: present
    install_options: appdir=/Applications,force
  with_items: "{{ homebrew_cask_apps }}"
  when: item not in installed_casks

# Customize Atom after being installed with Homebrew.
- name: Configure Atom packages.
  shell: "{{ item }}"
  with_items: "{{ atom_packages }}"
  ignore_errors: true

- name: Check for a style file.
  stat:
    path: "{{ atom_styling_path }}"
  register: style_path

- name: Configure Atom style.
  copy:
    src: "{{ atom_styling_path }}"
    dest: ~/.atom/styles.less
  when: style_path.stat.exists
  ignore_errors: true